#!/usr/bin/python

#    cephstat
#    Copyright (C) 2018 Aleksei Zakharov
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

from __future__ import print_function
import ceph_daemon
import json
from StringIO import StringIO
from os import listdir
from time import sleep
import argparse
import glob,re
import sys,signal

# perf dump schema
schema={}
# saved counters to calc diff
previous_counters={}
# values to print
actual_vals={}
# update/show interval
interval='1.0'

# values to print
default_vals=['op_w','op_r','op_w_in_bytes','op_r_out_bytes','op_w_latency','op_r_latency']

# available ceph daemons
daemons_available=['osd','mon']

# path to admin sockets
asok_path='/var/run/ceph'

def signal_handler(signal, frame):
        sys.exit(0)

def parse_args():
    argparser = argparse.ArgumentParser()
    argparser.add_argument("daemon",nargs="?",help='Daemon name.num to get stats from (Ex.: osd.0)\
            Supported daemons: '+str(daemons_available))
    argparser.add_argument("-i","--interval", default='1', action='store',type=float,
        help="Amount of time between reports (default = 1 second)")
    argparser.add_argument("-m","--metric",nargs="+",required=False,
        help="Metrics to parse. -l for more info")
    argparser.add_argument("-l","--list-metrics",action='store_true',required=False,
        help="List available metrics")
    argparser.add_argument("-d","--list-daemons",action='store_true',required=False,
        help="List local available (running) daemons")
    argparser.add_argument("-p","--asok-path",nargs="?",default=asok_path,required=False,
        help="Set path to admin socket\
		default: "+asok_path)
    return argparser.parse_args()


def get_asok(DAEMON,NUM):
	global asok_path
        asoks=[]
        for i in glob.glob(asok_path+'/ceph-'+DAEMON+'.'+NUM+'.asok'):
            if(i):
                asoks.append(i)
        return asoks

def get_avg(param):
        if 'avgcount' in json.dumps(param):
                return param.get('avgcount')

def get_sum(param):
        if 'sum' in json.dumps(param):
                return param.get('sum')

def list_daemons():
	global asok_path
	for i in glob.glob(asok_path+'/ceph-*.*.asok'):
		d=re.search(r'ceph-(.*).asok',i).group(1)
                if d.rsplit('.')[0] not in daemons_available:
                    print(d + "(unavailable)")
                    continue
                print (d)
        return

def parse_option(dump,daemon_num):
	global schema,actual_vals
	res={}
	for k,v in dump.items():
		# Hmm, ignore objecter, cause of similar to osd metric names
		if k != 'objecter':
			res.update(json.loads(json.dumps(dump[k])))
        for key,value in res.items():
		key_schema = json.dumps(schema[key])
		key_type = json.dumps(json.loads(key_schema)["type"])
                # type = 10 - bytes-based metric
		if key_type == "10":
			if key in previous_counters.keys():
				actual_vals[key] = (value & 0xffffffffffffffff -\
						 previous_counters[key] & 0xffffffffffffffff)
			previous_counters[key] = value & 0xffffffffffffffff
			continue
                # type = 5 - latency metric
		if key_type == "5":
			avg = get_avg(value)
			summ = get_sum(value)
			latency_vals = {'avg' : avg, 'summ' : summ}
			if key in previous_counters.keys():
				previous_avg = previous_counters[key]['avg']
				previous_summ = previous_counters[key]['summ']
				last_summ = summ - previous_summ
				if last_summ != 0:
					actual_vals[key] = '%.5f'%(last_summ / (avg - previous_avg))
				else:
					actual_vals[key] = 0
			previous_counters[key] = latency_vals
		# type = 2 - just integer
		if key_type == "2":
			actual_vals[key] = value
				
	
def parse_schema(dump):
	global schema
	for k,v in dump.items():
		if k != 'objecter':
		    schema.update(json.loads(json.dumps(dump[k])))

def list_metrics(daemon,daemon_num):
    global schema
    for asok in get_asok(daemon,daemon_num):
        asok_perf_schema = json.loads(ceph_daemon.admin_socket(asok,['perf','schema'],'format'))
        parse_schema(asok_perf_schema)
        for k,v in schema.items():
            print (k)
		

def read_asok(daemon,daemon_num):
	global interval
	for asok in get_asok(daemon,daemon_num):
		asok_perf_schema = json.loads(ceph_daemon.admin_socket(asok,['perf','schema'],'format'))
		parse_schema(asok_perf_schema)
		line = 0
		while(1):
        		asok_perf_dump = json.loads(ceph_daemon.admin_socket(asok,['perf','dump'],'format'))
			parse_option(asok_perf_dump,daemon_num)
			head_string = ""
			metrics_string = ""
			offsets={}
			for k in default_vals:
				if k in actual_vals.keys():
					head_string += k + '\t'
					offsets[k] = len(k)
					value = str(actual_vals.get(k))
					metrics_string += value + ' ' * (offsets[k]-len(value)) + '\t'
			if (line == 1 or line % 10 == 0):
				print ("\n"+head_string)
			print (metrics_string)
			line+=1
			sleep(interval)

def main():
  signal.signal(signal.SIGINT, signal_handler)
  args = parse_args()
  global interval,default_vals,daemons_available,asok_path


  if args.asok_path :
    asok_path=args.asok_path

  if args.list_daemons :
    list_daemons()
    return

  if not args.daemon:
    print("At least -d or <daemon.num> required!")
    print("-h or --help for help")
    return
  daemon=args.daemon.rsplit('.')[0]
  if daemon not in daemons_available:
    print("Don't know about "+daemon)
    return -1

  daemon_num=args.daemon.rsplit('.')[1]
  if args.list_metrics :
    list_metrics(daemon,daemon_num)
    return

  if args.metric :
    default_vals=args.metric


  interval = args.interval
  read_asok(daemon,daemon_num)

if __name__ == "__main__":
  main()
